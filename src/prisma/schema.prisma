generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id                  Int                @id(map: "User_pkey") @default(autoincrement())
  email               String             @unique(map: "User_email_key")
  name                String
  avatarUrl           String             @default("")
  genres              String             @default("")
  backgroundUrl       String             @default("")
  lastUpdatedAt       DateTime           @default(now())
  ratings             rating[]
  following           social_relations[] @relation("followerId")
  followers           social_relations[] @relation("followingId")
  receivedSuggestions suggestion[]       @relation("suggestedBy")
  madeSuggestions     suggestion[]       @relation("suggestedTo")
}

model rating {
  id        Int      @id(map: "Rating_pkey") @default(autoincrement())
  type      String
  spotifyId String
  rating    Int
  createdAt DateTime @default(now())
  authorId  Int?
  author    user?    @relation(fields: [authorId], references: [id], onDelete: Cascade, map: "Rating_authorId_fkey")
}

model suggestion {
  id                Int      @id(map: "Suggestion_pkey") @default(autoincrement())
  suggestedByUserId Int?
  suggestedToUserId Int?
  spotifyId         String
  rating            Int?
  type              String
  createdAt         DateTime @default(now())
  suggestedBy       user?    @relation("suggestedBy", fields: [suggestedByUserId], references: [id], onDelete: Cascade, map: "Suggestion_suggestedByUserId_fkey")
  suggestedTo       user?    @relation("suggestedTo", fields: [suggestedToUserId], references: [id], onDelete: Cascade, map: "Suggestion_suggestedToUserId_fkey")
}

model social_relations {
  id                Int   @id(map: "SocialRelations_pkey") @default(autoincrement())
  followerIdUserId  Int?
  followingIdUserId Int?
  followerId        user? @relation("followerId", fields: [followerIdUserId], references: [id], onDelete: Cascade, map: "SocialRelations_followerIdUserId_fkey")
  followingId       user? @relation("followingId", fields: [followingIdUserId], references: [id], onDelete: Cascade, map: "SocialRelations_followingIdUserId_fkey")
}

model favorite_titles {
  id              Int    @id(map: "FavoriteTitles_pkey") @default(autoincrement())
  favoriteSongs   String @default("My top 10 songs")
  favoriteAlbums  String @default("My top 10 albums")
  favoriteArtists String @default("My top 10 artists")
}

model saved_songs {
  id        Int    @id(map: "SavedSongs_pkey") @default(autoincrement())
  spotifyId String
  name      String
  imageUrl  String
  artists   Json
  album     Json
  userId    Int
  index     Int
}
